package SoftwareIIProject;


import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.Locale;
import java.util.ResourceBundle;

/**
 * Controller for Add/Modify Customer Scene
 */
public class CustomerAddModifyController {

    private ObservableList<Customer> customerList = FXCollections.observableArrayList();
    private ObservableList<Appointments> appointmentsList = FXCollections.observableArrayList();

    @FXML private ComboBox<String> firstLevelDivisionComboBox;
    @FXML private ComboBox<String> countryComboBox;
    @FXML private TextField idTextField;
    @FXML private TextField nameTextField;
    @FXML private TextField addressTextField;
    @FXML private TextField postalCodeTextField;
    @FXML private TextField phoneNumberTextField;

    @FXML private Label customerLabel;
    @FXML private Label errorLabel;
    @FXML private Label idLabel;
    @FXML private Label nameLabel;
    @FXML private Label addressLabel;
    @FXML private Label postalCodeLabel;
    @FXML private Label phoneNumberLabel;
    @FXML private Label countryLabel;
    @FXML private Label stateLabel;
    @FXML private Button saveButton;
    @FXML private Button backButton;

    private Connection conn;
    private Integer userID;
    private Integer autoGeneratedID;
    private Customer selectedCustomer;
    private final Locale locale = Locale.getDefault();

    /**
     * Adds new customer to Database and Customer List, check for blank users another method
     * to check for blank text fields and null ComboBoxes
     * Creates New item if ID text field is blank or Updates existing item if not
     * @param event Add Button Pushed
     * @throws IOException Throws exception
     */
    public void addCustomerButton(ActionEvent event) throws IOException {

        boolean error;
        error = checkUserInputs();

        if (!error) {
            try {
                String sqlStatement = "SELECT * FROM users WHERE user_ID = '" + userID + "'";
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery(sqlStatement);
                result.next();

                String divisionString = firstLevelDivisionComboBox.getValue();
                String sqlDivision = "SELECT * FROM first_level_divisions WHERE Division = '" + divisionString + "'";
                Statement divisionstmt = conn.createStatement();
                ResultSet divisionResult = divisionstmt.executeQuery(sqlDivision);
                divisionResult.next();

                String countrySql = "SELECT * FROM countries WHERE Country_ID = '" + divisionResult.getString("COUNTRY_ID") + "'";
                Statement countryStmt = conn.createStatement();
                ResultSet countryResult = countryStmt.executeQuery(countrySql);
                countryResult.next();

                String customerID = autoGeneratedID.toString();
                String customerName = nameTextField.getText();
                String address = addressTextField.getText();
                String postalCode = postalCodeTextField.getText();
                String phone = phoneNumberTextField.getText();
                String createDate = LocalDateTime.now().toString();
                String createBy = result.getString("User_Name");
                String lastUpdate = LocalDateTime.now().toString();
                String lastUpdateBy = result.getString("User_Name");
                String divisionID = divisionResult.getString("Division_ID");

                if (idTextField.getText().equals("")) {
                    Statement newCustomer = conn.createStatement();
                    String sqlNewCustomer = "INSERT INTO customers" +
                            "(Customer_ID, Customer_Name, Address, Postal_Code, Phone, Create_Date, Created_By, Last_Update, Last_Updated_By, Division_ID)" +
                            "VALUES ('"
                            + customerID + "','"
                            + customerName + "','"
                            + address + "','"
                            + postalCode + "','"
                            + phone + "','"
                            + createDate + "','"
                            + createBy + "','"
                            + lastUpdate + "','"
                            + lastUpdateBy + "','"
                            + divisionID + "')";

                    newCustomer.executeUpdate(sqlNewCustomer);

                    Customer update = new Customer(
                            autoGeneratedID,
                            customerName,
                            address,
                            postalCode,
                            phone,
                            LocalDateTime.now(),
                            createBy,
                            LocalDateTime.now(),
                            lastUpdateBy,
                            divisionResult.getString("Division"),
                            countryResult.getString("Country")
                    );
                    customerList.add(update);


                } else {
                    Statement newCustomer = conn.createStatement();
                    String sqlNewCustomer = "UPDATE customers" +
                            " SET Customer_Name = '" + customerName + "'," +
                            " Address = '" + address + "'," +
                            " Postal_Code = '" + postalCode + "'," +
                            " Phone = '" + phone + "'," +
                            " Last_Update = '" + lastUpdate + "'," +
                            " Last_Updated_By = '" + lastUpdateBy + "'," +
                            " Division_ID = '" + divisionID + "'" +
                            " WHERE Customer_ID = '" + idTextField.getText() + "'";
                    newCustomer.executeUpdate(sqlNewCustomer);

                    int customerIndex = 0;
                    for(int i = 0; i < customerList.size(); i++) {
                        if (Integer.parseInt(idTextField.getText()) == customerList.get(i).getId()){
                            customerIndex = customerList.indexOf(customerList.get(i));
                        }
                    }
                    Customer update = new Customer(
                            autoGeneratedID,
                            customerName,
                            address,
                            postalCode,
                            phone,
                            LocalDateTime.now(),
                            createBy,
                            LocalDateTime.now(),
                            lastUpdateBy,
                            divisionResult.getString("Division"),
                            countryResult.getString("Country")
                    );

                    customerList.set(customerIndex, update);
                }

            } catch (Exception ex) {
                System.out.println("Error: " + ex.getMessage());
            }

            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("MainUI.fxml"));
            Parent tableViewParent = loader.load();

            Scene tableViewScene = new Scene(tableViewParent);
            MainUIController mainUIController = loader.getController();
            mainUIController.setDatabaseConnection(conn, userID, customerList, appointmentsList);

            Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
            window.setScene(tableViewScene);
            window.show();

        }
    }

    /**
     * Returns user Back the Main UI, passing lists, connection, and userID.
     * @param event Back Button Pushed
     * @throws IOException Throws Exception
     */
    public void backButton(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("MainUI.fxml"));
        Parent tableViewParent = loader.load();

        Scene tableViewScene = new Scene(tableViewParent);
        MainUIController mainUIController = loader.getController();
        mainUIController.setDatabaseConnection(conn, userID, customerList, appointmentsList);

        Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
        window.setScene(tableViewScene);
        window.show();
    }

    /**
     * Checks for null ComboBoxes and blank text fields display error in user's language (English or French)
     * @return True is ComboBox is null or text field is blank
     */
    private boolean checkUserInputs(){

        boolean error = false;
        String caughtErrors = "";

        var rb = ResourceBundle.getBundle("translation",locale);

        if (nameTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString("NoName") + "\n";
            error = true;
        }

        if (addressTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString("NoAddress") + "\n";
            error = true;
        }

        if (postalCodeTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString( "NoPostal") + "\n";
            error = true;
        }

        if (phoneNumberTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString("NoPhone") + "\n";
            error = true;
        }

        if (countryComboBox.getValue() == null)
        {
            caughtErrors = caughtErrors + rb.getString("NoCountry") + "\n";
            error = true;
        }

        if (firstLevelDivisionComboBox.getValue() == null)
        {
            caughtErrors = caughtErrors + rb.getString("NoState") + "\n";
            error = true;
        }
        errorLabel.setText(caughtErrors);
        return error;
    }

    /**
     * Sets Country ComboBox
     */
    public void setCountryComboBox()
    {
        try {
            String sqlStatement = "SELECT * FROM countries";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            result.next();

            do { countryComboBox.getItems().add(result.getString("Country")); }
            while(result.next());
        }
        catch (Exception ex){System.out.println("Error: " + ex.getMessage()); }
    }

    /**
     * Sets First Level Division ComboBox
     */
    public void setFirstLevelDivisionComboBox()
    {
        try {
            String sqlStatement = "SELECT * FROM first_level_divisions";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            result.next();

            do { firstLevelDivisionComboBox.getItems().add(result.getString("Division")); }
            while(result.next());
        }
        catch (Exception ex){System.out.println("Error: " + ex.getMessage()); }
    }

    /**
     * Filters First Level Division ComboBox based on Country Selected
     * @throws SQLException Throws exception
     */
    public void filterFirstLevelDivisions() throws SQLException {

        firstLevelDivisionComboBox.getItems().clear();

        if (countryComboBox.getValue().equals("U.S"))
        {
            String sqlStatement = "SELECT * FROM first_level_divisions WHERE COUNTRY_ID = '1' ";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            result.next();
            do{ firstLevelDivisionComboBox.getItems().add(result.getString("Division")); }
            while (result.next());
        }

        if (countryComboBox.getValue().equals("UK"))
        {
            String sqlStatement = "SELECT * FROM first_level_divisions WHERE COUNTRY_ID = '2' ";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            result.next();
            do{ firstLevelDivisionComboBox.getItems().add(result.getString("Division")); }
            while (result.next());
        }

        if (countryComboBox.getValue().equals("Canada"))
        {
            String sqlStatement = "SELECT * FROM first_level_divisions WHERE COUNTRY_ID = '3' ";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            result.next();
            do{ firstLevelDivisionComboBox.getItems().add(result.getString("Division")); }
            while (result.next());
        }

    }

    /**
     * Sets new Customer ID number based on largest ID in database +1
     */
    private void setAutoGeneratedID(){
        try {
            int newID = 0;
            String sqlStatement = "SELECT * FROM customers";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            while (result.next())
            {
                if (newID < Integer.parseInt(result.getString("Customer_ID")))
                {
                    newID = Integer.parseInt(result.getString("Customer_ID"));
                }
            }
            autoGeneratedID = newID + 1;
        }
        catch (Exception ex){System.out.println(ex.getMessage());}
    }

    /**
     * Sets Lists, Connection, UserID, ComboBoxes and AutoGeneratedID when User press Add from main UI
     * @param mainUI Database Connection
     * @param user User ID
     * @param customer Customer List
     * @param appointments Appointments List
     */
    public void setDatabaseConnectionAdd(Connection mainUI, Integer user, ObservableList<Customer> customer, ObservableList<Appointments> appointments){
        conn = mainUI;
        userID = user;
        customerList = customer;
        appointmentsList = appointments;
        setCountryComboBox();
        setFirstLevelDivisionComboBox();
        setAutoGeneratedID();
    }
    /**
     * Sets Lists, Connection, UserID, ComboBoxes and AutoGeneratedID when User press Update from main UI and populated text fields
     * @param mainUI Database Connection
     * @param user User ID
     * @param customer Customer List
     * @param appointments Appointments List
     * @param selected Set Customer Selected
     */
    public void setDatabaseConnectionModify(Connection mainUI, Integer user,ObservableList<Customer> customer, ObservableList<Appointments> appointments, Customer selected){
        conn = mainUI;
        userID = user;
        selectedCustomer = selected;
        customerList = customer;
        appointmentsList = appointments;

        setCountryComboBox();
        setFirstLevelDivisionComboBox();
        setAutoGeneratedID();
        setTextFields();
    }

    /**
     * Sets the text fields and ComboBoxes with selected customer info
     */
    private void setTextFields()
    {
        try {
            String firstLevelSql = "SELECT * FROM first_level_divisions WHERE Division = '" + selectedCustomer.getDivision() +"'";
            Statement firstLevelStmt = conn.createStatement();
            ResultSet firstLevelResult = firstLevelStmt.executeQuery(firstLevelSql);
            firstLevelResult.next();

            String countryID = firstLevelResult.getString("COUNTRY_ID");
            String countrySql = "SELECT * FROM countries WHERE Country_ID = '" + countryID + "'";
            Statement countryStmt = conn.createStatement();
            ResultSet countryResult = countryStmt.executeQuery(countrySql);
            countryResult.next();

            idTextField.setText(Integer.toString(selectedCustomer.getId()));
            nameTextField.setText(selectedCustomer.getName());
            addressTextField.setText(selectedCustomer.getAddress());
            postalCodeTextField.setText(selectedCustomer.getPostalCode());
            phoneNumberTextField.setText(selectedCustomer.getPhone());
            firstLevelDivisionComboBox.setValue(firstLevelResult.getString("Division"));
            countryComboBox.setValue(countryResult.getString("Country"));

        }
        catch(Exception ex){System.out.println(ex.getMessage());}
    }

    /**
     * Sets labels and Buttons to user's default language
     */
    public void initialize()
    {
        var rb = ResourceBundle.getBundle("translation",locale);
        customerLabel.setText(rb.getString("Customer"));
        idLabel.setText(rb.getString("ID"));
        nameLabel.setText(rb.getString("Name"));
        addressLabel.setText(rb.getString("Address"));
        postalCodeLabel.setText(rb.getString("PostalCode"));
        phoneNumberLabel.setText(rb.getString("PhoneNumber"));
        countryLabel.setText(rb.getString("Country"));
        stateLabel.setText(rb.getString("State"));
        idTextField.setPromptText(rb.getString("AutoGenerated"));
        saveButton.setText(rb.getString("Save"));
        backButton.setText(rb.getString("Back"));
    }
}
