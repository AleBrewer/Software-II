package SoftwareIIProject;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.TimeZone;

/**
 * Controller for the Appointment Add and Appointment Modify Scene
 */
public class AppointmentsAddModifyController {
    private Connection conn;
    private Integer userID;
    private Integer autoGeneratedID;
    private Appointments selectedAppointment;

    private final Calendar calendar = Calendar.getInstance();
    private final DateTimeFormatter format = DateTimeFormatter.ofPattern("hh:mm a");

    private ObservableList<Appointments> appointmentsList = FXCollections.observableArrayList();
    private ObservableList<Customer> customerList = FXCollections.observableArrayList();

    private final Locale locale = Locale.getDefault();

    @FXML TextField appointmentIDTextField;
    @FXML TextField titleTextField;
    @FXML TextField descriptionTextField;
    @FXML TextField locationTextField;
    @FXML ComboBox<String> contactComboBox;
    @FXML TextField typeTextField;
    @FXML DatePicker startDatePicker;
    @FXML ComboBox<LocalTime> startTimeComboBox;
    @FXML DatePicker endDatePicker;
    @FXML ComboBox<LocalTime> endTimeComboBox;
    @FXML ComboBox<String> customerComboBox;
    @FXML Label errorLabel;

    @FXML Label addModifyLabel;
    @FXML Label appointmentIDLabel;
    @FXML Label titleLabel;
    @FXML Label descriptionLabel;
    @FXML Label locationLabel;
    @FXML Label contactLabel;
    @FXML Label typeLabel;
    @FXML Label startDateLabel;
    @FXML Label startTimeLabel;
    @FXML Label endDateLabel;
    @FXML Label endTimeLabel;
    @FXML Label customerIdLabel;
    @FXML Button saveButton;
    @FXML Button cancelButton;


    /**
     * Changes Scene back to Main UI and passes Connection, UserID, CustomerList and AppointmentList
     * @param event Button Click
     * @throws IOException Throws Exception
     */
    public void backToAppointments(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("AppointmentsUI.fxml"));
        Parent tableViewParent = loader.load();

        Scene tableViewScene = new Scene(tableViewParent);

        AppointmentsUIController appointmentsUIController = loader.getController();
        appointmentsUIController.setDatabaseConnection(conn, userID, customerList, appointmentsList);

        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
        window.setScene(tableViewScene);
        window.show();
    }

    /**
     * Saves the Appointment to the Database and Appointments List
     * And returns user back to main UI
     * @param event Button Click
     * @throws IOException Throws Exception
     */
    public void saveAppointments(ActionEvent event) throws IOException {


        boolean error;

        error = checkValuesOfUserInput();
        if(!error){error = checkAppointments();}


        if (!error) {
            try {

                String userSql = "SELECT * FROM users WHERE user_ID = '" + userID + "'";
                Statement userStmt = conn.createStatement();
                ResultSet userResult = userStmt.executeQuery(userSql);
                userResult.next();

                String contactSql = "SELECT * FROM contacts WHERE Contact_Name = '" + contactComboBox.getValue() + "'";
                Statement contactStmt = conn.createStatement();
                ResultSet contactResult = contactStmt.executeQuery(contactSql);
                contactResult.next();

                String customerSql = "SELECT * FROM customers WHERE Customer_ID = '" + customerComboBox.getValue() + "'";
                Statement customerStmt = conn.createStatement();
                ResultSet customerResult = customerStmt.executeQuery(customerSql);
                customerResult.next();


                String appointmentID = autoGeneratedID.toString();
                String title = titleTextField.getText();
                String description = descriptionTextField.getText();
                String location = locationTextField.getText();
                String type = typeTextField.getText();
                String start = Timestamp.valueOf((LocalDateTime.of(startDatePicker.getValue(), startTimeComboBox.getValue()))).toString();
                String end = Timestamp.valueOf((LocalDateTime.of(endDatePicker.getValue(), endTimeComboBox.getValue()))).toString();
                String createDate = Timestamp.valueOf(LocalDateTime.now()).toString();
                String createdBy = userResult.getString("User_Name");
                String lastUpdate = Timestamp.valueOf(LocalDateTime.now()).toString();
                String lastUpdatedBy = userResult.getString("User_Name");
                String customer_ID = customerComboBox.getValue();
                String user_ID = userResult.getString("User_ID");
                String contact_ID = contactResult.getString("Contact_ID");


                if (appointmentIDTextField.getText().equals("")) {
                    Statement newAppointment = conn.createStatement();
                    String sqlNewAppointment = "INSERT INTO appointments " +
                            "(Appointment_ID, Title, Description, Location, Type, Start, End, Create_Date, Created_By, Last_Update, Last_Updated_By, Customer_ID, User_ID, Contact_ID) " +
                            "VALUES ('"
                            + appointmentID + "','"
                            + title + "','"
                            + description + "','"
                            + location + "','"
                            + type + "','"
                            + start + "','"
                            + end + "','"
                            + createDate + "','"
                            + createdBy + "','"
                            + lastUpdate + "','"
                            + lastUpdatedBy + "','"
                            + customer_ID + "','"
                            + user_ID + "','"
                            + contact_ID + "')";

                    newAppointment.executeUpdate(sqlNewAppointment);

                    Appointments update = new Appointments(
                            autoGeneratedID,
                            title,
                            description,
                            location,
                            type,
                            LocalDateTime.of(startDatePicker.getValue(), startTimeComboBox.getValue()),
                            LocalDateTime.of(endDatePicker.getValue(), endTimeComboBox.getValue()),
                            LocalDateTime.now(),
                            createdBy,
                            LocalDateTime.now(),
                            lastUpdatedBy,
                            Integer.parseInt(customer_ID),
                            Integer.parseInt(user_ID),
                            Integer.parseInt(contact_ID),
                            contactResult.getString("Contact_Name"),
                            customerResult.getString("Customer_Name"));

                    appointmentsList.add(update);

                }
                else {
                    Statement newAppointment = conn.createStatement();
                    String sqlCustomer = "UPDATE appointments" +
                            " SET Title = '" + title + "'," +
                            " Description = '" + description + "'," +
                            " Location = '" + location + "'," +
                            " Start = '" + start + "'," +
                            " End = '" + end + "'," +
                            " Last_Update = '" + lastUpdate + "'," +
                            " Last_Updated_By = '" + lastUpdatedBy + "'," +
                            " Customer_ID = '" + customer_ID + "'," +
                            " User_ID = '" + user_ID + "'," +
                            " Contact_ID = '" + contact_ID + "'" +
                            " WHERE Appointment_ID = '" + appointmentIDTextField.getText() + "'";

                    newAppointment.executeUpdate(sqlCustomer);

                    int appointmentIndex = 0;
                    for(int i = 0; i < appointmentsList.toArray().length; i++) {
                        if (Integer.parseInt(appointmentIDTextField.getText()) == appointmentsList.get(i).getAppointmentID()){
                            appointmentIndex = appointmentsList.indexOf(appointmentsList.get(i));
                        }
                    }
                    Appointments update = new Appointments(
                            Integer.parseInt(appointmentIDTextField.getText()),
                            title,
                            description,
                            location,
                            type,
                            LocalDateTime.of(startDatePicker.getValue(), startTimeComboBox.getValue()),
                            LocalDateTime.of(endDatePicker.getValue(), endTimeComboBox.getValue()),
                            LocalDateTime.now(),
                            createdBy,
                            LocalDateTime.now(),
                            lastUpdatedBy,
                            Integer.parseInt(customer_ID),
                            Integer.parseInt(user_ID),
                            Integer.parseInt(contact_ID),
                            contactResult.getString("Contact_Name"),
                            customerResult.getString("Customer_Name"));

                    appointmentsList.set(appointmentIndex, update);

                }

            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }

            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("AppointmentsUI.fxml"));
            Parent tableViewParent = loader.load();

            Scene tableViewScene = new Scene(tableViewParent);

            AppointmentsUIController appointmentsUIController = loader.getController();
            appointmentsUIController.setDatabaseConnection(conn, userID, customerList, appointmentsList);

            Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
            window.setScene(tableViewScene);
            window.show();
        }
    }

    /**
     * Sets the Contact ComboBox with all Contacts from the Database
     */
    private void setContactComboBox() {
        try {
            String sqlStatement = "SELECT * FROM contacts";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            while (result.next()) {
                contactComboBox.getItems().add(result.getString("Contact_Name"));
            }
        }
        catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Sets the Customer ComboBox with all Customer from the Database
     */
    private void setCustomerComboBox() {
        try {
            String sqlStatement = "SELECT * FROM customers";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            while (result.next()) {
                customerComboBox.getItems().add(result.getString("Customer_ID"));
            }
        }
        catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Find the highest appointment ID Value in the Database and sets the AutoGenerated to that Number plus 1
     */
    private void setAutoGeneratedID() {
        try {
            int newID = 0;
            String sqlStatement = "SELECT * FROM appointments";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            while (result.next()) {
                if (newID < Integer.parseInt(result.getString("Appointment_ID"))) {
                    newID = Integer.parseInt(result.getString("Appointment_ID"));
                }
            }
            autoGeneratedID = newID + 1;
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Runs when "add" Appointment Button is pushed
     * @param appointmentConn Sets Connection from Database
     * @param user Sets the current User's ID
     * @param customers Sets the Customer List
     * @param appointments Set the the Appointment List
     * Sets the Auto Generated ID Number and sets ComboBoxes
     */
    public void setDatabaseConnectionAdd(Connection appointmentConn, Integer user, ObservableList<Customer> customers, ObservableList<Appointments> appointments) {
        conn = appointmentConn;
        userID = user;
        customerList = customers;
        appointmentsList = appointments;
        setAutoGeneratedID();
        setContactComboBox();
        setTimeComboBoxes();
        setCustomerComboBox();

    }

    /**
     * Runs when "Update" Appointment Button is pushed
     * @param appointmentConn Sets Connection from Database
     * @param user Sets the current User's ID
     * @param customers Sets the Customer List
     * @param appointments Set the the Appointment List
     * Sets the Auto Generated ID Number and sets ComboBoxes
     * Also Sets the Texts fields with selected item's information
     */

    public void setDatabaseConnectionModify(Connection appointmentConn, Integer user, ObservableList<Customer> customers, ObservableList<Appointments> appointments, Appointments selection) {
        conn = appointmentConn;
        userID = user;
        customerList = customers;
        appointmentsList = appointments;

        setAutoGeneratedID();
        setContactComboBox();
        setTimeComboBoxes();
        setCustomerComboBox();
        selectedAppointment = selection;
        setTextFields();
    }

    /**
     * Set the texts fields with the selected items information
     */
    private void setTextFields() {

        appointmentIDTextField.setText(Integer.toString(selectedAppointment.getAppointmentID()));
        titleTextField.setText(selectedAppointment.getTitle());
        descriptionTextField.setText(selectedAppointment.getDescription());
        locationTextField.setText(selectedAppointment.getLocation());
        contactComboBox.setValue(selectedAppointment.getContactName());
        typeTextField.setText(selectedAppointment.getType());
        startDatePicker.setValue(selectedAppointment.getStart().toLocalDate());
        startTimeComboBox.setValue(selectedAppointment.getStart().toLocalTime());
        endDatePicker.setValue(selectedAppointment.getEnd().toLocalDate());
        endTimeComboBox.setValue(selectedAppointment.getEnd().toLocalTime());
        customerComboBox.setValue(Integer.toString(selectedAppointment.getCustomerID()));
    }

    /**
     * Sets the Time ComboBoxes according to local time zone and compares against EST 8am - 10pm to allow user to only select available times
     */
    private void setTimeComboBoxes()
    {

        int value = 0;

        TimeZone localtimeZone = calendar.getTimeZone();

        LocalDateTime timeNow = LocalDateTime.now();
        ZonedDateTime currentZone = timeNow.atZone(localtimeZone.toZoneId());
        ZonedDateTime targetZone = currentZone.withZoneSameInstant(ZoneId.of("US/Eastern"));

        if (timeNow.isBefore(targetZone.toLocalDateTime())) {

            LocalDateTime timeCompare = timeNow;

            while (!timeCompare.format(format).equals(targetZone.toLocalDateTime().format(format)))
            {
                timeCompare = timeCompare.plusHours(1);
                value = value + 1;
            }

            LocalTime start;

            try{start = LocalTime.of(8 - value, 0);}
            catch (Exception ex){start = LocalTime.of(0,0);}

            LocalTime end = LocalTime.of(22 - value, 0);

            while (start.isBefore(end.plusSeconds(1))){
                startTimeComboBox.getItems().add(start);
                endTimeComboBox.getItems().add(start);
                start = start.plusMinutes(30);
            }
        }

        else if (timeNow.isAfter(targetZone.toLocalDateTime())){

            LocalDateTime timeCompare = targetZone.toLocalDateTime();

            while (!timeCompare.format(format).equals(timeNow.format(format)))
            {
                timeCompare = timeCompare.plusHours(1);
                value = value + 1;
            }

            LocalTime start = LocalTime.of(8 + value, 0);
            LocalTime end;

            try{end = LocalTime.of(22 + value, 0);}
            catch (Exception ex){end = LocalTime.of(23,0);}

            while (start.isBefore(end.plusSeconds(1))){
                startTimeComboBox.getItems().add(start);
                endTimeComboBox.getItems().add(start);
                start = start.plusMinutes(30);
            }
        }

        else if (timeNow.isEqual(targetZone.toLocalDateTime())){

            LocalTime start = LocalTime.of(8, 0);
            LocalTime end = LocalTime.of(22, 0);

            while (start.isBefore(end.plusSeconds(1))){
                startTimeComboBox.getItems().add(start);
                endTimeComboBox.getItems().add(start);
                start = start.plusMinutes(30);
            }
        }
    }

    /**
     * Check if there are overLapping appointments for the contact selected
     * @return true if overLapping appointment is found, otherwise returns false
     */
    private boolean checkAppointments()
    {
        try {
            String contactIDSql = "SELECT * FROM contacts WHERE Contact_Name = '" + contactComboBox.getValue() + "'";
            Statement contactIDStmt = conn.createStatement();
            ResultSet contactIDResult = contactIDStmt.executeQuery(contactIDSql);
            contactIDResult.next();

            int contactID = Integer.parseInt(contactIDResult.getString("Contact_ID"));

            String appointmentTimeSql = "SELECT * FROM appointments WHERE Contact_ID = '" + contactID + "'";
            Statement appointmentTimeStmt = conn.createStatement();
            ResultSet appointmentTimeResult = appointmentTimeStmt.executeQuery(appointmentTimeSql);

            var rb = ResourceBundle.getBundle("translation",locale);

            if(startTimeComboBox.getValue().isAfter(endTimeComboBox.getValue()) || startTimeComboBox.getValue().equals(endTimeComboBox.getValue())){
                errorLabel.setText(rb.getString("StartAfterEnd"));
                return true;
            }

            while (appointmentTimeResult.next())
            {
                LocalDateTime databaseStart = appointmentTimeResult.getTimestamp("Start", calendar).toLocalDateTime();
                LocalDateTime databaseEnd = appointmentTimeResult.getTimestamp("End", calendar).toLocalDateTime();
                LocalDateTime selectedStart = LocalDateTime.of(startDatePicker.getValue(), startTimeComboBox.getValue());
                LocalDateTime selectedEnd = LocalDateTime.of(endDatePicker.getValue(),endTimeComboBox.getValue());

                LocalDateTime timeCheck = selectedStart;


                while (!timeCheck.format(format).equals(selectedEnd.format(format)))
                {

                    if (timeCheck.equals(databaseStart) || timeCheck.equals(databaseEnd)) {
                        if (selectedStart.equals(databaseEnd) || selectedEnd.equals(databaseStart)) {
                            return false;
                        }
                        else {
                            if (selectedStart.equals(appointmentsList.get(appointmentsList.indexOf(selectedAppointment)).getStart())) {return false;}
                            errorLabel.setText(rb.getString("OverLappingAppointments"));
                            return true;
                        }
                    }
                    timeCheck = timeCheck.plusMinutes(30);
                }
            }
            return false;
        }
        catch (Exception ex){System.out.println(ex.getMessage()); return false;}
    }

    /**
     * Check to see if the User filled every TextField and ComboBox
     * @return true is any Text file is blank or comboBox is null
     */
    private boolean checkValuesOfUserInput()
    {
        String caughtErrors = "";
        boolean error = false;

        var rb = ResourceBundle.getBundle("translation",locale);

        if (titleTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString("TitleMissing") + "\n";
            error = true;
        }

        if (descriptionTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString("DescriptionMissing") + "\n";
            error = true;
        }

        if (locationTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString("LocationMissing") + "\n";
            error = true;
        }

        if (typeTextField.getText().equals(""))
        {
            caughtErrors = caughtErrors + rb.getString("TypeMissing") + "\n";
            error = true;
        }

        if(startDatePicker.getValue() == null)
        {
            caughtErrors = caughtErrors + rb.getString("NoStartDate") + "\n";
            error = true;
        }

        if(startTimeComboBox.getValue() == null)
        {
            caughtErrors = caughtErrors + rb.getString("NoStartTime") + "\n";
            error = true;
        }

        if(endDatePicker.getValue() == null)
        {
            caughtErrors = caughtErrors + rb.getString("NoEndDate") + "\n";
            error = true;
        }

        if(endTimeComboBox.getValue() == null)
        {
            caughtErrors = caughtErrors + rb.getString("NoEndTime") + "\n";
            error = true;
        }

        if(customerComboBox.getValue() == null)
        {
            caughtErrors = caughtErrors + rb.getString("NoCustomer") + "\n";
            error = true;
        }

        if(contactComboBox.getValue() == null) {
            {
                caughtErrors = caughtErrors + rb.getString("NoContact") + "\n";
                error = true;
            }
        }

        errorLabel.setText(caughtErrors);
        return error;

    }

    /**
     * Set the language for the scene in English or French
     */
    public void initialize()
    {

        Locale locale = Locale.getDefault();
        var rb = ResourceBundle.getBundle("translation",locale);

        addModifyLabel.setText(rb.getString("Appointments"));
        appointmentIDLabel.setText(rb.getString("AppointmentID"));
        titleLabel.setText(rb.getString("Title"));
        descriptionLabel.setText(rb.getString("Description"));
        locationLabel.setText(rb.getString("Location"));
        contactLabel.setText(rb.getString("ContactName"));
        typeLabel.setText(rb.getString("Type"));
        startDateLabel.setText(rb.getString("StartDate"));
        startTimeLabel.setText(rb.getString("StartTime"));
        endDateLabel.setText(rb.getString("EndDate"));
        endTimeLabel.setText(rb.getString("EndTime"));
        customerIdLabel.setText(rb.getString("CustomerID"));
        saveButton.setText(rb.getString("Save"));
        cancelButton.setText(rb.getString("Cancel"));

    }


}
