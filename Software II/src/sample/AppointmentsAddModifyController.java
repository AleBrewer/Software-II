package sample;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.TimeZone;

public class AppointmentsAddModifyController {
    private Connection conn;
    private Integer userID;
    private Integer autoGeneratedID;
    private Appointments selectedAppointment;
    @FXML private Label addModifyLabel;

    @FXML TextField appointmentIDTextField;
    @FXML TextField titleTextField;
    @FXML TextField descriptionTextField;
    @FXML TextField locationTextField;
    @FXML ComboBox<String> contactComboBox;
    @FXML TextField typeTextField;
    @FXML DatePicker startDatePicker;
    @FXML ComboBox<LocalTime> startTimeComboBox;
    @FXML DatePicker endDatePicker;
    @FXML ComboBox<LocalTime> endTimeComboBox;
    @FXML TextField customerIDTextField;

    public void backToAppointments(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("AppointmentsUI.fxml"));
        Parent tableViewParent = loader.load();

        Scene tableViewScene = new Scene(tableViewParent);

        AppointmentsUIController appointmentsUIController = loader.getController();
        appointmentsUIController.setDatabaseConnection(conn, userID);

        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
        window.setScene(tableViewScene);
        window.show();
    }

    public void addAppointments(ActionEvent event) throws IOException {
        try {

            String userSql = "SELECT * FROM users WHERE user_ID = '" + userID + "'";
            Statement userStmt = conn.createStatement();
            ResultSet userResult = userStmt.executeQuery(userSql);
            userResult.next();

            String contactSql = "SELECT * FROM contacts WHERE Contact_Name = '" + contactComboBox.getValue() + "'";
            Statement contactStmt = conn.createStatement();
            ResultSet contactResult = contactStmt.executeQuery(contactSql);
            contactResult.next();


            String appointmentID = autoGeneratedID.toString();
            String title = titleTextField.getText();
            String description = descriptionTextField.getText();
            String location = locationTextField.getText();
            String type = typeTextField.getText();
            String start = LocalDateTime.of(startDatePicker.getValue(), startTimeComboBox.getValue()).toString();
            String end = LocalDateTime.of(endDatePicker.getValue(), endTimeComboBox.getValue()).toString();
            String createDate = LocalDateTime.now().toString();
            String createdBy = userResult.getString("User_Name");
            String lastUpdate = LocalDateTime.now().toString();
            String lastUpdatedBy = userResult.getString("User_Name");
            String customer_ID = customerIDTextField.getText();
            String user_ID = userResult.getString("User_ID");
            String contact_ID = contactResult.getString("Contact_ID");


            if(appointmentIDTextField.getText().equals("")) {
                Statement newAppointment = conn.createStatement();
                String sqlNewAppointment = "INSERT INTO appointments " +
                        "(Appointment_ID, Title, Description, Location, Type, Start, End, Create_Date, Created_By, Last_Update, Last_Updated_By, Customer_ID, User_ID, Contact_ID) " +
                        "VALUES ('"
                        + appointmentID + "','"
                        + title + "','"
                        + description + "','"
                        + location + "','"
                        + type + "','"
                        + start + "','"
                        + end + "','"
                        + createDate + "','"
                        + createdBy + "','"
                        + lastUpdate + "','"
                        + lastUpdatedBy + "','"
                        + customer_ID + "','"
                        + user_ID + "','"
                        + contact_ID + "')";

                newAppointment.executeUpdate(sqlNewAppointment);
            }
            else {
                Statement newAppointment = conn.createStatement();
                String sqlCustomer = "UPDATE appointments" +
                        " SET Title = '" + title + "'," +
                        " Description = '" + description + "'," +
                        " Location = '" + location + "'," +
                        " Start = '" + start + "'," +
                        " End = '" + end + "'," +
                        " Last_Update = '" + lastUpdate + "'," +
                        " Last_Updated_By = '" + lastUpdatedBy + "'," +
                        " Customer_ID = '" + customer_ID + "'," +
                        " User_ID = '" + user_ID + "'," +
                        " Contact_ID = '" + contact_ID + "'" +
                        " WHERE Appointment_ID = '" + appointmentIDTextField.getText() + "'";

                newAppointment.executeUpdate(sqlCustomer);
            }

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("AppointmentsUI.fxml"));
        Parent tableViewParent = loader.load();

        Scene tableViewScene = new Scene(tableViewParent);

        AppointmentsUIController appointmentsUIController = loader.getController();
        appointmentsUIController.setDatabaseConnection(conn, userID);

        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
        window.setScene(tableViewScene);
        window.show();
    }


    private void setContactComboBox() {
        try {
            String sqlStatement = "SELECT * FROM contacts";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            while (result.next()) {
                contactComboBox.getItems().add(result.getString("Contact_Name"));
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }


    private void setAutoGeneratedID() {
        try {
            int newID = 0;
            String sqlStatement = "SELECT * FROM appointments";
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(sqlStatement);

            while (result.next()) {
                if (newID < Integer.parseInt(result.getString("Customer_ID"))) {
                    newID = Integer.parseInt(result.getString("Customer_ID"));
                }
            }
            autoGeneratedID = newID + 1;
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }


    public void setDatabaseConnectionAdd(Connection appointmentConn, Integer user) {
        conn = appointmentConn;
        userID = user;
        setAutoGeneratedID();
        setContactComboBox();
        setTimeComboBoxes();
        addModifyLabel.setText("Add Appointment");
    }

    public void setDatabaseConnectionModify(Connection appointmentConn, Integer user, Appointments selection) {
        conn = appointmentConn;
        userID = user;
        setAutoGeneratedID();
        setContactComboBox();
        setTimeComboBoxes();
        addModifyLabel.setText("Update Appointment");
        selectedAppointment = selection;
        setTextFields();
    }


    private void setTextFields() {

        appointmentIDTextField.setText(Integer.toString(selectedAppointment.getAppointmentID()));
        titleTextField.setText(selectedAppointment.getTitle());
        descriptionTextField.setText(selectedAppointment.getDescription());
        locationTextField.setText(selectedAppointment.getLocation());
        contactComboBox.setValue(selectedAppointment.getContactName());
        typeTextField.setText(selectedAppointment.getType());
        startDatePicker.setValue(selectedAppointment.getStart().toLocalDate());
        startTimeComboBox.setValue(selectedAppointment.getStart().toLocalTime());
        endDatePicker.setValue(selectedAppointment.getEnd().toLocalDate());
        endTimeComboBox.setValue(selectedAppointment.getEnd().toLocalTime());
        customerIDTextField.setText(Integer.toString(selectedAppointment.getCustomerID()));
    }

    private void setTimeComboBoxes()
    {

        int value = 0;
        DateTimeFormatter format = DateTimeFormatter.ofPattern("hh:mm a");

        Calendar calendar = Calendar.getInstance();
        TimeZone localtimeZone = calendar.getTimeZone();

        LocalDateTime timeNow = LocalDateTime.now();
        ZonedDateTime currentZone = timeNow.atZone(localtimeZone.toZoneId());
        ZonedDateTime targetZone = currentZone.withZoneSameInstant(ZoneId.of("US/Eastern"));


        if (timeNow.isBefore(targetZone.toLocalDateTime())) {

            LocalDateTime timeCompare = timeNow;

            while (!timeCompare.format(format).equals(targetZone.toLocalDateTime().format(format)))
            {
                timeCompare = timeCompare.plusHours(1);
                value = value + 1;
            }

            LocalTime start = LocalTime.of(8, 0);

            try{start = LocalTime.of(8 - value, 0);}
            catch (Exception ex){start = LocalTime.of(0,0);}

            LocalTime end = LocalTime.of(22 - value, 0);

            while (start.isBefore(end.plusSeconds(1))){
                startTimeComboBox.getItems().add(start);
                endTimeComboBox.getItems().add(start);
                start = start.plusMinutes(30);
            }
        }

        else if (timeNow.isAfter(targetZone.toLocalDateTime())){

            LocalDateTime timeCompare = targetZone.toLocalDateTime();

            while (!timeCompare.format(format).equals(timeNow.format(format)))
            {
                timeCompare = timeCompare.plusHours(1);
                value = value + 1;
            }

            LocalTime start = LocalTime.of(8 + value, 0);
            LocalTime end = LocalTime.of(22, 0);

            try{end = LocalTime.of(22 + value, 0);}
            catch (Exception ex){end = LocalTime.of(23,0);}

            while (start.isBefore(end.plusSeconds(1))){
                startTimeComboBox.getItems().add(start);
                endTimeComboBox.getItems().add(start);
                start = start.plusMinutes(30);
            }
        }

        else if (timeNow.isEqual(targetZone.toLocalDateTime())){

            LocalTime start = LocalTime.of(8, 0);
            LocalTime end = LocalTime.of(22, 0);

            while (start.isBefore(end.plusSeconds(1))){
                startTimeComboBox.getItems().add(start);
                endTimeComboBox.getItems().add(start);
                start = start.plusMinutes(30);
            }

        }






        /*
        Calendar calendar = Calendar.getInstance();
        TimeZone localtimeZone = calendar.getTimeZone();

        DateTimeFormatter format = DateTimeFormatter.ofPattern("MM-dd-yy hh:mm a");


        LocalDateTime rightNow = LocalDateTime.now();
        System.out.println(rightNow);
        ZonedDateTime timeNow = rightNow.atZone(localtimeZone.toZoneId());

        System.out.println(rightNow.format(format));

        ZonedDateTime targetTime = timeNow.withZoneSameInstant(ZoneId.of("US/Eastern"));
        System.out.println(targetTime.toLocalDateTime());
        */

    }

    public void initialize()
    {

    }


}
